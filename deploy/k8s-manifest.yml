apiVersion: v1
kind: ConfigMap
metadata:
  name: ${DEPLOYMENT_NAME}-nginx-config
data:
  nginx.conf: |
    server {
            listen 8000 default_server;
            server_name _;

            location / {
                    proxy_pass http://127.0.0.1:8080/auth/;
                    proxy_redirect http://$http_host/auth/ http://$http_host/;
                    proxy_redirect https://$http_host/auth/ https://$http_host/;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
    }


---


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${DEPLOYMENT_NAME}
  labels:
    app: ${DEPLOYMENT_NAME}
spec:
  serviceName: ${DEPLOYMENT_NAME}
  replicas: 1
  selector:
    matchLabels:
      app: ${DEPLOYMENT_NAME}
  volumeClaimTemplates:
    - metadata:
        name: deepomatic-resources
      spec:
        storageClassName: ${STORAGE_CLASS}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Gi
  template:
    metadata:
      labels:
        app: ${DEPLOYMENT_NAME}
    spec:
      restartPolicy: Always
      ${DOCKER_HUB_SECRET_NAME}

      containers:
      - name: runtime
        image: ${DOCKER_IMAGE_NAME}
        imagePullPolicy: IfNotPresent
        env:
        - name: AMQP_URL
          value: amqp://user:password@localhost:5672/nutanix
        - name: DRAW_DEMO
          value: "1"
        - name: PROCESS_EACH_N_FRAMES
          value: "30"
        ${NATS_ENDPOINT}
        ${NATS_SRC_TOPIC}
        ${NATS_DST_TOPIC}

      - name: neural-worker
        image: ${NEURAL_WORKER_VERSION}
        imagePullPolicy: IfNotPresent
        env:
        - name: ALLOW_NO_GPU
          value: "1"
        - name: AUTOSTART_WORKER
          value: "false"
        - name: AMQP_URL
          value: amqp://user:password@localhost:5672/nutanix
        - name: DEEPOMATIC_STORAGE_DIR
          value: /var/lib/deepomatic/services/worker-nn
        - name: WORKFLOWS_PATH
          value: /var/lib/deepomatic/services/worker-nn/resources/workflows.json
        volumeMounts:
          - name: deepomatic-resources
            mountPath: /var/lib/deepomatic



      - name: resource-server
        image: ${RESOURCE_SERVER_VERSION}
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        env:
        - name: DEEPOMATIC_API_URL
          value: https://api.deepomatic.com
        - name: DOWNLOAD_ON_STARTUP
          value: "1"
        - name: INIT_SYSTEM
          value: circus
        - name: VOUCHER
          value: DotNext2019
        volumeMounts:
          - name: deepomatic-resources
            mountPath: /app

      - name: rabbitmq
        image: rabbitmq:3.6
        imagePullPolicy: IfNotPresent
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: user
        - name: RABBITMQ_DEFAULT_PASS
          value: password
        - name: RABBITMQ_DEFAULT_VHOST
          value: nutanix

      ${NATS_SERVICE}

      - name: nginx
        image: nginx
        ports:
        - name: http
          containerPort: 8000
        volumeMounts:
          - name: ${DEPLOYMENT_NAME}-nginx-config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: nginx.conf
      volumes:
        - name: ${DEPLOYMENT_NAME}-nginx-config
          configMap:
            name: ${DEPLOYMENT_NAME}-nginx-config

---

kind: Service
apiVersion: v1
metadata:
 name: ${DEPLOYMENT_NAME}-nginx-svc
spec:
 selector:
   app: ${DEPLOYMENT_NAME}
 ports:
 - protocol: TCP
   name: http
   port: 8000
 type: NodePort
