apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${DEPLOYMENT_NAME}
  labels:
    app: ${DEPLOYMENT_NAME}
spec:
  serviceName: ${DEPLOYMENT_NAME}
  replicas: 1
  selector:
    matchLabels:
      app: ${DEPLOYMENT_NAME}
  volumeClaimTemplates:
    - metadata:
        name: deepomatic-resources
      spec:
        storageClassName: ${STORAGE_CLASS}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Gi
  template:
    metadata:
      labels:
        app: ${DEPLOYMENT_NAME}
    spec:
      restartPolicy: Always


      containers:
      - name: runtime
        image: ${DOCKER_IMAGE_NAME}
        imagePullPolicy: IfNotPresent
        env:
        - name: AMQP_URL
          value: amqp://user:password@localhost:5672/nutanix
        - name: PROCESS_EACH_N_FRAMES
          value: "50"
        # [PRODUCTION] For production: remove the 'DRAW_DEMO' line below.
        # The data forwarded by deepomatic App will then be a JSON dump of the recognition output.
        # Refer to the documentation for a specification of the output:
        # https://docs.deepomatic.com/deepomatic-api-v0-7/inference-output
        - {name: DRAW_DEMO, value: "1"}


      - name: neural-worker
        image: ${NEURAL_WORKER_VERSION}
        imagePullPolicy: IfNotPresent
        env:
        # [PRODUCTION] For production:
        # If you have access to a GPU, remove the 'ALLOW_NO_GPU' line and replace it by:
        # - {name: GPU_IDS, value: "0"}
        - {name: ALLOW_NO_GPU, value: "1"}
        - name: AUTOSTART_WORKER
          value: "false"
        - name: AMQP_URL
          value: amqp://user:password@localhost:5672/nutanix
        - name: DEEPOMATIC_STORAGE_DIR
          value: /var/lib/deepomatic/services/worker-nn
        - name: WORKFLOWS_PATH
          value: /var/lib/deepomatic/services/worker-nn/resources/workflows.json
        volumeMounts:
          - name: deepomatic-resources
            mountPath: /var/lib/deepomatic


      - name: resource-server
        image: ${RESOURCE_SERVER_VERSION}
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        env:
        - name: DEEPOMATIC_API_URL
          value: https://api.deepomatic.com
        # # [PRODUCTION] For production: uncomment those lines and directly fill in your credentials
        # # This will allow you to deactivate the web service just below which is used only to fill
        # # in the credentials
        #
        # - name: DEEPOMATIC_APP_ID
        #   value: "012345678901" # Put your DEEPOMATIC_APP_ID here
        # - name: DEEPOMATIC_API_KEY
        #   value: "0123456789abcdef0123456789abcdef" # Put your DEEPOMATIC_API_KEY here
        # - name: DEEPOMATIC_SITE_ID
        #   value: "01234567-89ab-cdef-0123-456789abcdef" # Put your DEEPOMATIC_SITE_ID here
        - name: DOWNLOAD_ON_STARTUP
          value: "1"
        - name: INIT_SYSTEM
          value: circus
        - name: VOUCHER
          value: DotNext2019
        volumeMounts:
          - name: deepomatic-resources
            mountPath: /app

      - name: rabbitmq
        image: rabbitmq:3.6
        imagePullPolicy: IfNotPresent
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: user
        - name: RABBITMQ_DEFAULT_PASS
          value: password
        - name: RABBITMQ_DEFAULT_VHOST
          value: nutanix

      # [PRODUCTION]: if you have filled in you crendentials APP_ID / API_KEY / SITE_ID, then
      # you can remove ALL the lines below. Even the ConfigMap ${DEPLOYMENT_NAME}-nginx-config
      # and the Service ${DEPLOYMENT_NAME}-nginx-svc
      - name: nginx
        image: nginx:1.15.12
        ports:
        - name: http
          containerPort: 8000
        volumeMounts:
          - name: ${DEPLOYMENT_NAME}-nginx-config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: nginx.conf
      volumes:
        - name: ${DEPLOYMENT_NAME}-nginx-config
          configMap:
            name: ${DEPLOYMENT_NAME}-nginx-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ${DEPLOYMENT_NAME}-nginx-config
data:
  nginx.conf: |
    server {
            listen 8000 default_server;
            server_name _;

            location / {
                    proxy_pass http://127.0.0.1:8080/auth/;
                    proxy_redirect http://\$http_host/auth/ http://\$http_host/;
                    proxy_redirect https://\$http_host/auth/ https://\$http_host/;
                    proxy_set_header Host \$http_host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            }
    }

---

kind: Service
apiVersion: v1
metadata:
 name: ${DEPLOYMENT_NAME}-nginx-svc
 labels:
   # This will show the launch button in the ui -- do not change
   uilabel: show-play-http-aba0339ef5aea2602129ed45a63d7d7f
spec:
 selector:
   app: ${DEPLOYMENT_NAME}
 ports:
 - protocol: TCP
   name: http
   port: 8000
   targetPort: http
 type: NodePort
